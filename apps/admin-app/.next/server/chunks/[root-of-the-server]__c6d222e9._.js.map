{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\n\n// Initialize Firebase Admin\n// Handle both true multiline and \"\\n\"-escaped private keys\nconst privateKey = (process.env.FIREBASE_PRIVATE_KEY || '')\n  .replace(/^\"|\"$/g, '')\n  .replace(/\\\\n/g, '\\n');\n\nconst firebaseAdminConfig = {\n  credential: cert({\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n    privateKey: privateKey,\n  }),\n};\n\n// Initialize Firebase Admin\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\n\n// Initialize Firebase Admin services\nexport const adminAuth = getAuth(adminApp);\nexport const adminDb = getFirestore(adminApp);\nexport const adminStorage = getStorage(adminApp);\n\nexport default adminApp;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,2DAA2D;AAC3D,MAAM,aAAa,CAAC,QAAQ,GAAG,CAAC,oBAAoB,IAAI,EAAE,EACvD,OAAO,CAAC,UAAU,IAClB,OAAO,CAAC,QAAQ;AAEnB,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/server-cache.ts"],"sourcesContent":["type CacheEntry<T> = { data: T; expiresAt: number };\r\n\r\nclass SimpleLRUCache {\r\n  private store = new Map<string, CacheEntry<any>>();\r\n  private order: string[] = [];\r\n  constructor(private maxEntries: number = 200) {}\r\n\r\n  get<T>(key: string): T | undefined {\r\n    const entry = this.store.get(key);\r\n    if (!entry) return undefined;\r\n    if (Date.now() > entry.expiresAt) {\r\n      this.delete(key);\r\n      return undefined;\r\n    }\r\n    // touch\r\n    this.order = this.order.filter(k => k !== key);\r\n    this.order.push(key);\r\n    return entry.data as T;\r\n    }\r\n\r\n  set<T>(key: string, value: T, ttlMs: number): void {\r\n    const expiresAt = Date.now() + ttlMs;\r\n    this.store.set(key, { data: value, expiresAt });\r\n    this.order = this.order.filter(k => k !== key);\r\n    this.order.push(key);\r\n    // evict\r\n    while (this.order.length > this.maxEntries) {\r\n      const oldest = this.order.shift();\r\n      if (oldest) this.store.delete(oldest);\r\n    }\r\n  }\r\n\r\n  delete(key: string): void {\r\n    this.store.delete(key);\r\n    this.order = this.order.filter(k => k !== key);\r\n  }\r\n\r\n  deleteByPrefix(prefix: string): void {\r\n    for (const key of Array.from(this.store.keys())) {\r\n      if (key.startsWith(prefix)) this.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\nexport const serverCache = new SimpleLRUCache(300);\r\n\r\nexport function makeKey(resource: string, parts: Array<string | number | boolean | null | undefined> = []) {\r\n  return `admin:${resource}:${parts.filter(v => v !== undefined && v !== null).join(':')}`;\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAEA,MAAM;;IACI,MAA2C;IAC3C,MAAqB;IAC7B,YAAY,AAAQ,aAAqB,GAAG,CAAE;aAA1B,aAAA;aAFZ,QAAQ,IAAI;aACZ,QAAkB,EAAE;IACmB;IAE/C,IAAO,GAAW,EAAiB;QACjC,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,OAAO,OAAO;QACnB,IAAI,KAAK,GAAG,KAAK,MAAM,SAAS,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC;YACZ,OAAO;QACT;QACA,QAAQ;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,OAAO,MAAM,IAAI;IACjB;IAEF,IAAO,GAAW,EAAE,KAAQ,EAAE,KAAa,EAAQ;QACjD,MAAM,YAAY,KAAK,GAAG,KAAK;QAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;YAAE,MAAM;YAAO;QAAU;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,QAAQ;QACR,MAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAE;YAC1C,MAAM,SAAS,IAAI,CAAC,KAAK,CAAC,KAAK;YAC/B,IAAI,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC;IACF;IAEA,OAAO,GAAW,EAAQ;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;IAC5C;IAEA,eAAe,MAAc,EAAQ;QACnC,KAAK,MAAM,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAK;YAC/C,IAAI,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC;QAC1C;IACF;AACF;AAEO,MAAM,cAAc,IAAI,eAAe;AAEvC,SAAS,QAAQ,QAAgB,EAAE,QAA6D,EAAE;IACvG,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,MAAM,MAAM,CAAC,CAAA,IAAK,MAAM,aAAa,MAAM,MAAM,IAAI,CAAC,MAAM;AAC1F","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/app/api/admin/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { adminDb, adminAuth } from \"@/lib/firebase-admin\";\nimport { serverCache, makeKey } from \"@/lib/server-cache\";\nimport { verifyAdminAuth, getQueryParams } from \"@/lib/admin-auth\";\n\n// Helper function to handle Firestore connection issues with retry logic\nasync function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  delay: number = 1000\n): Promise<T> {\n  let lastError: any;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error: any) {\n      lastError = error;\n      \n      // Check if it's a connection error that we should retry\n      if (error.code === 14 || // UNAVAILABLE\n          error.message?.includes('No connection established') ||\n          error.message?.includes('network socket disconnected') ||\n          error.message?.includes('TLS connection') ||\n          error.code === 'ECONNRESET' ||\n          error.code === 'ENOTFOUND') {\n        \n        // Retrying...\n        \n        if (attempt < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, delay));\n          delay *= 2; // Exponential backoff\n          continue;\n        }\n      }\n      \n      // If it's not a retryable error or we've exhausted retries, throw\n      throw error;\n    }\n  }\n  \n  throw lastError;\n}\n\n// GET - List all users\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const role = searchParams.get('role'); // 'user' or 'agent'\n    const status = searchParams.get('status'); // 'active' or 'inactive'\n    const limit = Math.min(parseInt(searchParams.get('limit') || '100'), 100); // Cap at 100\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const search = searchParams.get('search') || '';\n\n    const cacheKey = makeKey('users', ['list', role || 'all', status || 'all', limit, offset, search]);\n    const cached = serverCache.get<any>(cacheKey);\n    if (cached) {\n      return NextResponse.json(cached);\n    }\n\n    // Define collections to query based on role filter\n    const collectionsToQuery: string[] = [];\n    if (!role || role === 'all') {\n      collectionsToQuery.push('users', 'agents', 'admins');\n    } else {\n      if (role === 'user') collectionsToQuery.push('users');\n      if (role === 'agent') collectionsToQuery.push('agents');\n      if (role === 'admin') collectionsToQuery.push('admins');\n    }\n\n    // ULTRA-OPTIMIZED: Fetch only what we need + small buffer\n    const strictLimit = Math.min(limit + 20, 100); // Small buffer for filtering, max 100\n    \n    // OPTIMIZED: Query collections with proper ordering and limits\n    const queryPromises = collectionsToQuery.map(async (collectionName) => {\n      try {\n        let query: any = adminDb.collection(collectionName);\n        \n        // Apply status filter at database level\n        if (status && status !== 'all') {\n          const isActive = status === 'active';\n          query = query.where('isActive', '==', isActive);\n        }\n        \n        // Add ordering for consistent results\n        query = query.orderBy('createdAt', 'desc');\n        \n        // Apply strict limit to minimize data transfer\n        query = query.limit(strictLimit);\n\n        const snapshot = await withRetry(() => query.get());\n        \n        return {\n          collectionName,\n          snapshot\n        };\n      } catch (error: any) {\n        console.error(`[ERROR] Users GET: ${collectionName} failed:`, error);\n        return {\n          collectionName,\n          snapshot: { docs: [], size: 0 }\n        };\n      }\n    });\n\n    const results = await Promise.all(queryPromises);\n\n    // Map users efficiently (minimal transformations)\n    let allUsers: any[] = [];\n\n    results.forEach(({ collectionName, snapshot }) => {\n      // Skip empty snapshots\n      if (!snapshot.docs || snapshot.size === 0) return;\n      \n      const collectionUsers = snapshot.docs.map((doc: any) => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          email: data.email,\n          name: data.name,\n          role: data.role || collectionName.slice(0, -1),\n          isActive: data.isActive,\n          createdAt: data.createdAt?.toDate?.() || data.createdAt,\n          lastLoginAt: data.lastLoginAt?.toDate?.() || data.lastLoginAt,\n          phone: data.phone || null\n        };\n      });\n\n      allUsers = allUsers.concat(collectionUsers); // Faster than spread\n    });\n\n    // Sort by timestamp in memory (fast for <100 items)\n    allUsers.sort((a, b) => {\n      const aTime = new Date(a.createdAt).getTime() || 0;\n      const bTime = new Date(b.createdAt).getTime() || 0;\n      return bTime - aTime;\n    });\n\n    // Apply search filter (if needed)\n    if (search) {\n      const searchLower = search.toLowerCase();\n      allUsers = allUsers.filter(user => \n        user.name?.toLowerCase().includes(searchLower) ||\n        user.email?.toLowerCase().includes(searchLower) ||\n        user.phone?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Get total count efficiently\n    let totalCount = 0;\n    if (search) {\n      totalCount = allUsers.length; // Filtered count\n    } else {\n      // Use cached count or estimate from fetched data\n      const countCacheKey = makeKey('users', ['count', role || 'all', status || 'all']);\n      const cachedCount = serverCache.get<number>(countCacheKey);\n      \n      if (cachedCount !== undefined) {\n        totalCount = cachedCount;\n      } else {\n        totalCount = allUsers.length;\n        serverCache.set(countCacheKey, totalCount, 300_000); // 5 min\n      }\n    }\n\n    // Apply pagination\n    const startIndex = offset;\n    const endIndex = offset + limit;\n    const users = allUsers.slice(startIndex, endIndex);\n\n    const payload = {\n      success: true,\n      users,\n      pagination: {\n        total: totalCount,\n        limit,\n        offset,\n        hasMore: endIndex < totalCount,\n        pages: Math.ceil(totalCount / limit)\n      }\n    };\n    \n    serverCache.set(cacheKey, payload, 300_000); // 5 min cache\n    return NextResponse.json(payload);\n\n  } catch (error: any) {\n    console.error(\"Error fetching users:\", error);\n    \n    // Handle specific error types\n    if (error.code === 14 || error.message?.includes('No connection established')) {\n      return NextResponse.json(\n        { success: false, error: \"Database connection failed. Please try again.\" },\n        { status: 503 }\n      );\n    }\n    \n    if (error.name === 'AbortError' || error.message?.includes('timeout')) {\n      return NextResponse.json(\n        { success: false, error: \"Request timed out. Please try again.\" },\n        { status: 408 }\n      );\n    }\n    \n    if (error.message?.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\", message: error.message },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        success: false, \n        error: \"Failed to fetch users\",\n        message: error?.message || 'Unknown error',\n        details: process.env.NODE_ENV === 'development' ? error?.stack : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create new user\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const authStart = Date.now();\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { email, name, password, role = 'user', phone } = body;\n\n    // Trim and validate inputs\n    const trimmedEmail = email?.trim();\n    const trimmedName = name?.trim();\n\n    if (!trimmedEmail || !trimmedName || !password) {\n      return NextResponse.json(\n        { success: false, error: \"Email, name, and password are required\", message: \"Email, name, and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(trimmedEmail)) {\n      return NextResponse.json(\n        { success: false, error: \"Please enter a valid email address\", message: \"Please enter a valid email address\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate password length\n    if (password.length < 6) {\n      return NextResponse.json(\n        { success: false, error: \"Password must be at least 6 characters long\", message: \"Password must be at least 6 characters long\" },\n        { status: 400 }\n      );\n    }\n\n    if (!['user', 'agent', 'admin'].includes(role)) {\n      return NextResponse.json(\n        { success: false, error: \"Invalid role. Must be user, agent, or admin\", message: `Invalid role: ${role}. Must be user, agent, or admin` },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists\n    const existingUser = await withRetry(() => adminAuth.getUserByEmail(trimmedEmail)).catch(() => null);\n    if (existingUser) {\n      return NextResponse.json(\n        { success: false, error: \"User with this email already exists\" },\n        { status: 409 }\n      );\n    }\n\n    // Create user in Firebase Auth\n    const userRecord = await withRetry(() => adminAuth.createUser({\n      email: trimmedEmail,\n      password,\n      displayName: trimmedName\n    }));\n\n    // Prepare user document\n    const userData = {\n      email: trimmedEmail,\n      name: trimmedName,\n      password,\n      role,\n      phone: phone?.trim() || null,\n      isActive: true,\n      createdAt: new Date(),\n      createdBy: admin.adminId\n    };\n\n    // Determine collection based on role\n    let collectionName = 'users'; // default\n    if (role === 'agent') collectionName = 'agents';\n    if (role === 'admin') collectionName = 'admins';\n\n    // OPTIMIZED: Run Firestore writes in parallel\n    await Promise.all([\n      adminDb.collection(collectionName).doc(userRecord.uid).set(userData),\n      adminDb.collection('logs').add({\n        actionType: 'user_created',\n        actorId: admin.adminId,\n        actorType: 'admin',\n        targetUserId: userRecord.uid,\n        details: {\n          email: trimmedEmail,\n          name: trimmedName,\n          role\n        },\n        timestamp: new Date()\n      })\n    ]);\n    \n    // Invalidate cache after successful creation\n    serverCache.deleteByPrefix(makeKey('users', ['list']));\n    serverCache.deleteByPrefix(makeKey('users', ['count']));\n\n    return NextResponse.json({\n      success: true,\n      message: \"User created successfully\",\n      data: {\n        user: {\n          id: userRecord.uid,\n          email: trimmedEmail,\n          name: trimmedName,\n          role,\n          isActive: true,\n          createdAt: userData.createdAt\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error creating user:\", error);\n    \n    if (error.message?.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\", message: error.message },\n        { status: 401 }\n      );\n    }\n\n    if (error.code === 'auth/email-already-exists' || error.code === 'adminAuth/email-already-exists') {\n      return NextResponse.json(\n        { success: false, error: \"User with this email already exists\", message: \"User with this email already exists\" },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to create user\", message: error?.message || \"Failed to create user\" },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update user\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const authStart = Date.now();\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { userId, name, email, role, isActive, phone } = await request.json();\n\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: \"User ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // OPTIMIZED: Find user in all collections PARALLEL\n    const collections = ['users', 'agents', 'admins'];\n    const findPromises = collections.map(collection => \n      withRetry(() => adminDb.collection(collection).doc(userId).get())\n    );\n    \n    const docs = await Promise.all(findPromises);\n    let userDoc = null;\n    let collectionName = '';\n    \n    for (let i = 0; i < docs.length; i++) {\n      if (docs[i].exists) {\n        userDoc = docs[i];\n        collectionName = collections[i];\n        break;\n      }\n    }\n    \n    if (!userDoc) {\n      return NextResponse.json(\n        { success: false, error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const updateData: any = {\n      updatedAt: new Date(),\n      updatedBy: admin.adminId\n    };\n\n    if (name !== undefined) updateData.name = name;\n    if (email !== undefined) updateData.email = email;\n    if (role !== undefined) updateData.role = role;\n    if (isActive !== undefined) updateData.isActive = isActive;\n    if (phone !== undefined) updateData.phone = phone;\n\n    // OPTIMIZED: Parallel updates for Firestore + Auth + Logs\n    const updatePromises: Promise<any>[] = [];\n    \n    // If role is being changed, we might need to move the user to a different collection\n    if (role !== undefined && role !== userDoc.data().role) {\n      const newCollectionName = role === 'agent' ? 'agents' : role === 'admin' ? 'admins' : 'users';\n      \n      if (newCollectionName !== collectionName) {\n        // Move user to new collection (sequential - must create before delete)\n        await adminDb.collection(newCollectionName).doc(userId).set({\n          ...userDoc.data(),\n          ...updateData\n        });\n        await adminDb.collection(collectionName).doc(userId).delete();\n      } else {\n        // Update in same collection\n        updatePromises.push(\n          adminDb.collection(collectionName).doc(userId).update(updateData)\n        );\n      }\n    } else {\n      // Update user document in current collection\n      updatePromises.push(\n        adminDb.collection(collectionName).doc(userId).update(updateData)\n      );\n    }\n\n    // Update Firebase Auth if email changed (parallel)\n    if (email !== undefined) {\n      updatePromises.push(withRetry(() => adminAuth.updateUser(userId, { email })));\n    }\n\n    // Log the action (parallel)\n    updatePromises.push(\n      adminDb.collection('logs').add({\n        actionType: 'user_updated',\n        actorId: admin.adminId,\n        actorType: 'admin',\n        targetUserId: userId,\n        details: updateData,\n        timestamp: new Date()\n      })\n    );\n\n    // Execute all updates in parallel\n    await Promise.all(updatePromises);\n\n    // Invalidate cache\n    serverCache.deleteByPrefix(makeKey('users', ['list']));\n    if (role !== undefined) {\n      serverCache.deleteByPrefix(makeKey('users', ['count']));\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \"User updated successfully\"\n    });\n\n  } catch (error: any) {\n    console.error(\"Error updating user:\", error);\n    \n    if (error.message.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to update user\" },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Deactivate user (soft delete)\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const authStart = Date.now();\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: \"User ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // OPTIMIZED: Find user in all collections PARALLEL\n    const collections = ['users', 'agents', 'admins'];\n    const findPromises = collections.map(collection => \n      withRetry(() => adminDb.collection(collection).doc(userId).get())\n    );\n    \n    const docs = await Promise.all(findPromises);\n    let userDoc = null;\n    let collectionName = '';\n    \n    for (let i = 0; i < docs.length; i++) {\n      if (docs[i].exists) {\n        userDoc = docs[i];\n        collectionName = collections[i];\n        break;\n      }\n    }\n    \n    if (!userDoc) {\n      return NextResponse.json(\n        { success: false, error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    // OPTIMIZED: Run deletion operations in parallel\n    await Promise.all([\n      // Delete from Firestore\n      withRetry(() => adminDb.collection(collectionName).doc(userId).delete()),\n      // Delete from Firebase Auth\n      withRetry(() => adminAuth.deleteUser(userId)),\n      // Log the action\n      withRetry(() => adminDb.collection('logs').add({\n        actionType: 'user_deleted',\n        actorId: admin.adminId,\n        actorType: 'admin',\n        targetUserId: userId,\n        details: {\n          reason: 'Admin deletion'\n        },\n        timestamp: new Date()\n      }))\n    ]);\n    \n    // Invalidate cache after successful deletion\n    serverCache.deleteByPrefix(makeKey('users', ['list']));\n    serverCache.deleteByPrefix(makeKey('users', ['count']));\n\n    return NextResponse.json({\n      success: true,\n      message: \"User deleted successfully\"\n    });\n\n  } catch (error: any) {\n    console.error(\"Error deleting user:\", error);\n    \n    if (error.message.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to delete user\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}