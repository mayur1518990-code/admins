{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { getFirestore } from 'firebase-admin/firestore';\r\nimport { getStorage } from 'firebase-admin/storage';\r\n\r\n// Initialize Firebase Admin\r\nconst privateKey = process.env.FIREBASE_PRIVATE_KEY?.replace(/^\"|\"$/g, '') || '';\r\n\r\nconst firebaseAdminConfig = {\r\n  credential: cert({\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n    privateKey: privateKey,\r\n  }),\r\n};\r\n\r\n// Initialize Firebase Admin\r\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\r\n\r\n// Initialize Firebase Admin services\r\nexport const adminAuth = getAuth(adminApp);\r\nexport const adminDb = getFirestore(adminApp);\r\nexport const adminStorage = getStorage(adminApp);\r\n\r\nexport default adminApp;\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,UAAU,OAAO;AAE9E,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/app/api/admin/assign/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { adminDb } from '@/lib/firebase-admin';\nimport { verifyAdminAuth } from '@/lib/admin-auth';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get assignment statistics\n    const filesSnapshot = await adminDb.collection('files').get();\n    const agentsSnapshot = await adminDb.collection('agents').get();\n\n    const files = filesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n    const agents = agentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n    // Calculate statistics\n    const totalFiles = files.length;\n    const assignedFiles = files.filter(f => f.assignedAgentId).length;\n    const unassignedFiles = totalFiles - assignedFiles;\n\n    // Agent workload\n    const agentWorkload = agents.map(agent => {\n      const agentFiles = files.filter(f => f.assignedAgentId === agent.id);\n      return {\n        agentId: agent.id,\n        agentName: agent.name || 'Unknown',\n        totalFiles: agentFiles.length,\n        pendingFiles: agentFiles.filter(f => f.status === 'paid').length,\n        completedFiles: agentFiles.filter(f => f.status === 'completed').length\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        totalFiles,\n        assignedFiles,\n        unassignedFiles,\n        agentWorkload\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Error fetching assignment stats:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch assignment statistics' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { fileIds, agentId, assignmentType } = await request.json();\n\n    if (!fileIds || !agentId) {\n      return NextResponse.json({ \n        success: false, \n        error: 'File IDs and Agent ID are required' \n      }, { status: 400 });\n    }\n\n    // Handle both single fileId and array of fileIds\n    const filesToAssign = Array.isArray(fileIds) ? fileIds : [fileIds];\n\n    // Verify agent exists\n    const agentDoc = await adminDb.collection('agents').doc(agentId).get();\n    if (!agentDoc.exists) {\n      return NextResponse.json({ \n        success: false, \n        error: 'Agent not found' \n      }, { status: 404 });\n    }\n\n    const agentData = agentDoc.data();\n\n    // Update all files assignment\n    const updatePromises = filesToAssign.map(fileId => \n      adminDb.collection('files').doc(fileId).update({\n        assignedAgentId: agentId,\n        assignedAt: new Date(),\n        status: 'paid', // Ensure file is marked as paid when assigned\n        updatedAt: new Date()\n      })\n    );\n\n    await Promise.all(updatePromises);\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      action: 'file_assigned',\n      adminId: admin.adminId,\n      adminName: admin.name,\n      fileIds: filesToAssign,\n      agentId,\n      agentName: agentData?.name || 'Unknown',\n      assignmentType: assignmentType || 'manual',\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: `Successfully assigned ${filesToAssign.length} file(s) to agent`,\n      assignedCount: filesToAssign.length\n    });\n\n  } catch (error: any) {\n    console.error('Error assigning file:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to assign file' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { fileId } = await request.json();\n\n    if (!fileId) {\n      return NextResponse.json({ \n        success: false, \n        error: 'File ID is required' \n      }, { status: 400 });\n    }\n\n    // Remove assignment from file\n    await adminDb.collection('files').doc(fileId).update({\n      assignedAgentId: null,\n      assignedAt: null,\n      updatedAt: new Date()\n    });\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      action: 'file_unassigned',\n      adminId: admin.adminId,\n      adminName: admin.name,\n      fileId,\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'File unassigned successfully'\n    });\n\n  } catch (error: any) {\n    console.error('Error unassigning file:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to unassign file' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { type = 'round_robin' } = await request.json();\n\n    // Get all unassigned paid files\n    const unassignedFilesSnapshot = await adminDb.collection('files')\n      .where('status', '==', 'paid')\n      .where('assignedAgentId', '==', null)\n      .get();\n\n    if (unassignedFilesSnapshot.empty) {\n      return NextResponse.json({\n        success: true,\n        message: 'No unassigned files found',\n        assignedCount: 0\n      });\n    }\n\n    // Get all active agents\n    const agentsSnapshot = await adminDb.collection('agents')\n      .where('isActive', '==', true)\n      .get();\n\n    if (agentsSnapshot.empty) {\n      return NextResponse.json({\n        success: false,\n        error: 'No active agents found'\n      }, { status: 400 });\n    }\n\n    const agents = agentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n    const unassignedFiles = unassignedFilesSnapshot.docs;\n\n    let assignedCount = 0;\n\n    if (type === 'round_robin') {\n      // Round-robin assignment\n      for (let i = 0; i < unassignedFiles.length; i++) {\n        const file = unassignedFiles[i];\n        const agent = agents[i % agents.length];\n        \n        await adminDb.collection('files').doc(file.id).update({\n          assignedAgentId: agent.id,\n          assignedAt: new Date(),\n          updatedAt: new Date()\n        });\n\n        assignedCount++;\n      }\n    } else if (type === 'load_balanced') {\n      // Load-balanced assignment (assign to agent with least files)\n      const agentWorkload = new Map();\n      \n      // Initialize workload for each agent\n      agents.forEach(agent => {\n        agentWorkload.set(agent.id, 0);\n      });\n\n      // Count current assignments for each agent\n      const currentAssignmentsSnapshot = await adminDb.collection('files')\n        .where('assignedAgentId', 'in', agents.map(a => a.id))\n        .where('status', 'in', ['paid', 'processing'])\n        .get();\n\n      currentAssignmentsSnapshot.docs.forEach(doc => {\n        const data = doc.data();\n        if (data.assignedAgentId) {\n          agentWorkload.set(data.assignedAgentId, (agentWorkload.get(data.assignedAgentId) || 0) + 1);\n        }\n      });\n\n      // Assign files to agents with least workload\n      for (const file of unassignedFiles) {\n        const leastLoadedAgent = Array.from(agentWorkload.entries())\n          .reduce((min, current) => current[1] < min[1] ? current : min);\n        \n        await adminDb.collection('files').doc(file.id).update({\n          assignedAgentId: leastLoadedAgent[0],\n          assignedAt: new Date(),\n          updatedAt: new Date()\n        });\n\n        // Update workload count\n        agentWorkload.set(leastLoadedAgent[0], leastLoadedAgent[1] + 1);\n        assignedCount++;\n      }\n    }\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      action: 'bulk_assignment',\n      adminId: admin.adminId,\n      adminName: admin.name,\n      assignmentType: type,\n      assignedCount,\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: `Successfully assigned ${assignedCount} files using ${type} method`,\n      assignedCount\n    });\n\n  } catch (error: any) {\n    console.error('Error performing bulk assignment:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to perform bulk assignment' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}