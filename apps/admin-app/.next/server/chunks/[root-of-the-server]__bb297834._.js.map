{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\n\n// Initialize Firebase Admin\n// Handle both true multiline and \"\\n\"-escaped private keys\nconst privateKey = (process.env.FIREBASE_PRIVATE_KEY || '')\n  .replace(/^\"|\"$/g, '')\n  .replace(/\\\\n/g, '\\n');\n\nconst firebaseAdminConfig = {\n  credential: cert({\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n    privateKey: privateKey,\n  }),\n};\n\n// Initialize Firebase Admin\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\n\n// Initialize Firebase Admin services\nexport const adminAuth = getAuth(adminApp);\nexport const adminDb = getFirestore(adminApp);\nexport const adminStorage = getStorage(adminApp);\n\nexport default adminApp;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,2DAA2D;AAC3D,MAAM,aAAa,CAAC,QAAQ,GAAG,CAAC,oBAAoB,IAAI,EAAE,EACvD,OAAO,CAAC,UAAU,IAClB,OAAO,CAAC,QAAQ;AAEnB,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/server-cache.ts"],"sourcesContent":["type CacheEntry<T> = { data: T; expiresAt: number };\r\n\r\nclass SimpleLRUCache {\r\n  private store = new Map<string, CacheEntry<any>>();\r\n  private order: string[] = [];\r\n  constructor(private maxEntries: number = 200) {}\r\n\r\n  get<T>(key: string): T | undefined {\r\n    const entry = this.store.get(key);\r\n    if (!entry) return undefined;\r\n    if (Date.now() > entry.expiresAt) {\r\n      this.delete(key);\r\n      return undefined;\r\n    }\r\n    // touch\r\n    this.order = this.order.filter(k => k !== key);\r\n    this.order.push(key);\r\n    return entry.data as T;\r\n    }\r\n\r\n  set<T>(key: string, value: T, ttlMs: number): void {\r\n    const expiresAt = Date.now() + ttlMs;\r\n    this.store.set(key, { data: value, expiresAt });\r\n    this.order = this.order.filter(k => k !== key);\r\n    this.order.push(key);\r\n    // evict\r\n    while (this.order.length > this.maxEntries) {\r\n      const oldest = this.order.shift();\r\n      if (oldest) this.store.delete(oldest);\r\n    }\r\n  }\r\n\r\n  delete(key: string): void {\r\n    this.store.delete(key);\r\n    this.order = this.order.filter(k => k !== key);\r\n  }\r\n\r\n  deleteByPrefix(prefix: string): void {\r\n    for (const key of Array.from(this.store.keys())) {\r\n      if (key.startsWith(prefix)) this.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\nexport const serverCache = new SimpleLRUCache(300);\r\n\r\nexport function makeKey(resource: string, parts: Array<string | number | boolean | null | undefined> = []) {\r\n  return `admin:${resource}:${parts.filter(v => v !== undefined && v !== null).join(':')}`;\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAEA,MAAM;;IACI,MAA2C;IAC3C,MAAqB;IAC7B,YAAY,AAAQ,aAAqB,GAAG,CAAE;aAA1B,aAAA;aAFZ,QAAQ,IAAI;aACZ,QAAkB,EAAE;IACmB;IAE/C,IAAO,GAAW,EAAiB;QACjC,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,OAAO,OAAO;QACnB,IAAI,KAAK,GAAG,KAAK,MAAM,SAAS,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC;YACZ,OAAO;QACT;QACA,QAAQ;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,OAAO,MAAM,IAAI;IACjB;IAEF,IAAO,GAAW,EAAE,KAAQ,EAAE,KAAa,EAAQ;QACjD,MAAM,YAAY,KAAK,GAAG,KAAK;QAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;YAAE,MAAM;YAAO;QAAU;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,QAAQ;QACR,MAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAE;YAC1C,MAAM,SAAS,IAAI,CAAC,KAAK,CAAC,KAAK;YAC/B,IAAI,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC;IACF;IAEA,OAAO,GAAW,EAAQ;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;IAC5C;IAEA,eAAe,MAAc,EAAQ;QACnC,KAAK,MAAM,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAK;YAC/C,IAAI,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC;QAC1C;IACF;AACF;AAEO,MAAM,cAAc,IAAI,eAAe;AAEvC,SAAS,QAAQ,QAAgB,EAAE,QAA6D,EAAE;IACvG,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,MAAM,MAAM,CAAC,CAAA,IAAK,MAAM,aAAa,MAAM,MAAM,IAAI,CAAC,MAAM;AAC1F","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/app/api/admin/assign/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { adminDb } from '@/lib/firebase-admin';\nimport { verifyAdminAuth } from '@/lib/admin-auth';\nimport { serverCache, makeKey } from '@/lib/server-cache';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Check cache\n    const cacheKey = makeKey('assign', ['stats']);\n    const cached = serverCache.get<any>(cacheKey);\n    if (cached) {\n      return NextResponse.json(cached);\n    }\n\n    // OPTIMIZED: Parallel queries with limits to prevent huge data fetches\n    const [filesSnapshot, agentsSnapshot] = await Promise.all([\n      adminDb.collection('files')\n        .orderBy('uploadedAt', 'desc')\n        .limit(500) // Reduced limit for better performance\n        .get(),\n      adminDb.collection('agents')\n        .limit(100) // Limit agents query\n        .get()\n    ]);\n\n    // OPTIMIZED: Process data efficiently - extract only needed fields\n    \n    // Count assignments and build workload map in single pass\n    let totalFiles = 0;\n    let assignedFiles = 0;\n    let unassignedFiles = 0;\n    const workloadMap = new Map<string, { total: number; pending: number; completed: number }>();\n    \n    filesSnapshot.docs.forEach(doc => {\n      totalFiles++;\n      const data = doc.data();\n      const agentId = data.assignedAgentId;\n      const status = data.status;\n      \n      if (agentId) {\n        assignedFiles++;\n        const current = workloadMap.get(agentId) || { total: 0, pending: 0, completed: 0 };\n        current.total++;\n        if (status === 'paid' || status === 'assigned') current.pending++;\n        if (status === 'completed') current.completed++;\n        workloadMap.set(agentId, current);\n      } else {\n        unassignedFiles++;\n      }\n    });\n\n    // Build agent workload array - only extract needed fields\n    const agentWorkload = agentsSnapshot.docs.map(doc => {\n      const data = doc.data();\n      const workload = workloadMap.get(doc.id) || { total: 0, pending: 0, completed: 0 };\n      return {\n        agentId: doc.id,\n        agentName: data.name || 'Unknown',\n        totalFiles: workload.total,\n        pendingFiles: workload.pending,\n        completedFiles: workload.completed\n      };\n    });\n\n    const responsePayload = {\n      success: true,\n      data: {\n        totalFiles,\n        assignedFiles,\n        unassignedFiles,\n        agentWorkload\n      }\n    };\n\n    // OPTIMIZED: Cache for 2 minutes (consistent with other sections)\n    serverCache.set(cacheKey, responsePayload, 120_000);\n    return NextResponse.json(responsePayload);\n\n  } catch (error: any) {\n    console.error('Error fetching assignment stats:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch assignment statistics' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { fileIds, agentId, assignmentType } = await request.json();\n\n    if (!fileIds || !agentId) {\n      return NextResponse.json({ \n        success: false, \n        error: 'File IDs and Agent ID are required' \n      }, { status: 400 });\n    }\n\n    // Handle both single fileId and array of fileIds\n    const filesToAssign = Array.isArray(fileIds) ? fileIds : [fileIds];\n\n    // Verify agent exists\n    const agentDoc = await adminDb.collection('agents').doc(agentId).get();\n    if (!agentDoc.exists) {\n      return NextResponse.json({ \n        success: false, \n        error: 'Agent not found' \n      }, { status: 404 });\n    }\n\n    const agentData = agentDoc.data();\n\n    // OPTIMIZED: Use batched writes for better performance\n    const maxBatchSize = 500; // Firestore batch limit\n    let processedCount = 0;\n\n    for (let i = 0; i < filesToAssign.length; i += maxBatchSize) {\n      const batchFiles = filesToAssign.slice(i, Math.min(i + maxBatchSize, filesToAssign.length));\n      const batch = adminDb.batch();\n\n      batchFiles.forEach(fileId => {\n        const fileRef = adminDb.collection('files').doc(fileId);\n        batch.update(fileRef, {\n          assignedAgentId: agentId,\n          assignedAt: new Date(),\n          status: 'assigned',\n          updatedAt: new Date()\n        });\n      });\n\n      await batch.commit();\n      processedCount += batchFiles.length;\n    }\n\n    // OPTIMIZED: Parallel logging and cache clearing\n    await Promise.all([\n      adminDb.collection('logs').add({\n        action: 'file_assigned',\n        adminId: admin.adminId,\n        adminName: admin.name,\n        fileIds: filesToAssign,\n        agentId,\n        agentName: agentData?.name || 'Unknown',\n        assignmentType: assignmentType || 'manual',\n        timestamp: new Date()\n      }),\n      Promise.resolve().then(() => {\n        serverCache.deleteByPrefix(makeKey('assign'));\n        serverCache.deleteByPrefix(makeKey('files'));\n      })\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      message: `Successfully assigned ${filesToAssign.length} file(s) to agent`,\n      assignedCount: filesToAssign.length\n    });\n\n  } catch (error: any) {\n    console.error('Error assigning file:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to assign file' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { fileId } = await request.json();\n\n    if (!fileId) {\n      return NextResponse.json({ \n        success: false, \n        error: 'File ID is required' \n      }, { status: 400 });\n    }\n\n    // OPTIMIZED: Parallel operations for update and logging\n    await Promise.all([\n      adminDb.collection('files').doc(fileId).update({\n        assignedAgentId: null,\n        assignedAt: null,\n        updatedAt: new Date()\n      }),\n      adminDb.collection('logs').add({\n        action: 'file_unassigned',\n        adminId: admin.adminId,\n        adminName: admin.name,\n        fileId,\n        timestamp: new Date()\n      })\n    ]);\n\n    // Clear cache\n    serverCache.deleteByPrefix(makeKey('assign'));\n    serverCache.deleteByPrefix(makeKey('files'));\n\n    return NextResponse.json({\n      success: true,\n      message: 'File unassigned successfully'\n    });\n\n  } catch (error: any) {\n    console.error('Error unassigning file:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to unassign file' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { type = 'round_robin' } = await request.json();\n\n    // OPTIMIZED: Fetch both queries in parallel with limits\n    const [unassignedFilesSnapshot, agentsSnapshot] = await Promise.all([\n      adminDb.collection('files')\n        .where('status', '==', 'paid')\n        .where('assignedAgentId', '==', null)\n        .limit(1000) // Limit to prevent huge queries\n        .get(),\n      adminDb.collection('agents')\n        .where('isActive', '==', true)\n        .limit(100) // Limit agents query\n        .get()\n    ]);\n\n    if (unassignedFilesSnapshot.empty) {\n      return NextResponse.json({\n        success: true,\n        message: 'No unassigned files found',\n        assignedCount: 0\n      });\n    }\n\n    if (agentsSnapshot.empty) {\n      return NextResponse.json({\n        success: false,\n        error: 'No active agents found'\n      }, { status: 400 });\n    }\n\n    // OPTIMIZED: Extract only needed agent fields\n    const agents = agentsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      name: doc.data().name,\n      maxWorkload: doc.data().maxWorkload || 20\n    }));\n    const unassignedFiles = unassignedFilesSnapshot.docs;\n\n    let assignedCount = 0;\n    const assignmentPlan: Array<{ fileId: string; agentId: string }> = [];\n\n    if (type === 'round_robin') {\n      // OPTIMIZED: Calculate assignments first, then batch write\n      for (let i = 0; i < unassignedFiles.length; i++) {\n        const file = unassignedFiles[i];\n        const agent = agents[i % agents.length];\n        assignmentPlan.push({ fileId: file.id, agentId: agent.id });\n      }\n    } else if (type === 'load_balanced') {\n      // OPTIMIZED: Batch query for current workload with limits\n      const agentWorkload = new Map<string, number>();\n      \n      // Initialize workload for each agent\n      agents.forEach(agent => {\n        agentWorkload.set(agent.id, 0);\n      });\n\n      // OPTIMIZED: Single query to get current assignments with limit\n      const agentIds = agents.map(a => a.id);\n      \n      // Handle Firestore 'in' query limit of 10 items\n      for (let i = 0; i < agentIds.length; i += 10) {\n        const batchIds = agentIds.slice(i, Math.min(i + 10, agentIds.length));\n        const batchSnapshot = await adminDb.collection('files')\n          .where('assignedAgentId', 'in', batchIds)\n          .where('status', 'in', ['paid', 'assigned', 'in_progress'])\n          .limit(1000) // Limit to prevent huge queries\n          .get();\n\n        batchSnapshot.docs.forEach(doc => {\n          const data = doc.data();\n          if (data.assignedAgentId) {\n            agentWorkload.set(\n              data.assignedAgentId, \n              (agentWorkload.get(data.assignedAgentId) || 0) + 1\n            );\n          }\n        });\n      }\n\n      // Calculate load-balanced assignments\n      for (const file of unassignedFiles) {\n        const leastLoadedAgent = Array.from(agentWorkload.entries())\n          .reduce((min, current) => current[1] < min[1] ? current : min);\n        \n        assignmentPlan.push({ fileId: file.id, agentId: leastLoadedAgent[0] });\n        \n        // Update workload count for next iteration\n        agentWorkload.set(leastLoadedAgent[0], leastLoadedAgent[1] + 1);\n      }\n    }\n\n    // OPTIMIZED: Use batch writes for all assignments\n    const maxBatchSize = 500; // Firestore batch limit\n    \n    for (let i = 0; i < assignmentPlan.length; i += maxBatchSize) {\n      const batchPlan = assignmentPlan.slice(i, Math.min(i + maxBatchSize, assignmentPlan.length));\n      const batch = adminDb.batch();\n      \n      batchPlan.forEach(({ fileId, agentId }) => {\n        const fileRef = adminDb.collection('files').doc(fileId);\n        batch.update(fileRef, {\n          assignedAgentId: agentId,\n          assignedAt: new Date(),\n          status: 'assigned',\n          updatedAt: new Date()\n        });\n      });\n\n      await batch.commit();\n      assignedCount += batchPlan.length;\n    }\n\n    // Log the action (parallel with cache clear)\n    await Promise.all([\n      adminDb.collection('logs').add({\n        action: 'bulk_assignment',\n        adminId: admin.adminId,\n        adminName: admin.name,\n        assignmentType: type,\n        assignedCount,\n        timestamp: new Date()\n      }),\n      // Clear cache\n      Promise.resolve().then(() => {\n        serverCache.deleteByPrefix(makeKey('assign'));\n        serverCache.deleteByPrefix(makeKey('files'));\n      })\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      message: `Successfully assigned ${assignedCount} files using ${type} method`,\n      assignedCount\n    });\n\n  } catch (error: any) {\n    console.error('Error performing bulk assignment:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to perform bulk assignment' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}