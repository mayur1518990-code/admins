{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { getFirestore } from 'firebase-admin/firestore';\r\nimport { getStorage } from 'firebase-admin/storage';\r\n\r\n// Initialize Firebase Admin\r\nconst privateKey = process.env.FIREBASE_PRIVATE_KEY?.replace(/^\"|\"$/g, '') || '';\r\n\r\nconst firebaseAdminConfig = {\r\n  credential: cert({\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n    privateKey: privateKey,\r\n  }),\r\n};\r\n\r\n// Initialize Firebase Admin\r\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\r\n\r\n// Initialize Firebase Admin services\r\nexport const adminAuth = getAuth(adminApp);\r\nexport const adminDb = getFirestore(adminApp);\r\nexport const adminStorage = getStorage(adminApp);\r\n\r\nexport default adminApp;\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,UAAU,OAAO;AAE9E,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/app/api/admin/agents/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { adminDb, adminAuth } from \"@/lib/firebase-admin\";\nimport { verifyAdminAuth } from \"@/lib/admin-auth\";\n\n// GET - List all agents\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const search = searchParams.get('search') || '';\n    const status = searchParams.get('status') || 'all';\n\n    // Get all agents from agents collection\n    const agentsSnapshot = await adminDb.collection('agents').get();\n    \n    // Map agents data\n    let agents = agentsSnapshot.docs\n      .map(doc => ({ \n        id: doc.id, \n        ...doc.data(),\n        role: 'agent' // Ensure role is set to agent\n      }));\n\n    // Apply status filter\n    if (status !== 'all') {\n      const isActive = status === 'active';\n      agents = agents.filter(agent => agent.isActive === isActive);\n    }\n\n    // Apply search filter\n    if (search) {\n      const searchLower = search.toLowerCase();\n      agents = agents.filter(agent => \n        agent.name?.toLowerCase().includes(searchLower) ||\n        agent.email?.toLowerCase().includes(searchLower) ||\n        agent.phone?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Sort by createdAt (newest first)\n    agents.sort((a, b) => {\n      const aTime = a.createdAt?.toDate?.() || new Date(0);\n      const bTime = b.createdAt?.toDate?.() || new Date(0);\n      return bTime.getTime() - aTime.getTime();\n    });\n\n    // Apply pagination\n    const totalAgents = agents.length;\n    const startIndex = (Number(page) - 1) * Number(limit);\n    const endIndex = startIndex + Number(limit);\n    const paginatedAgents = agents.slice(startIndex, endIndex);\n    \n    // Get agent statistics for paginated agents\n    const agentsWithStats = await Promise.all(paginatedAgents.map(async (agent) => {\n      // Get agent statistics\n      const filesSnapshot = await adminDb.collection('files')\n        .where('assignedAgentId', '==', agent.id)\n        .get();\n      \n      const completedFiles = filesSnapshot.docs.filter(doc => \n        doc.data().status === 'completed'\n      ).length;\n      \n      const pendingFiles = filesSnapshot.docs.filter(doc => \n        doc.data().status === 'paid' || doc.data().status === 'processing'\n      ).length;\n\n      return {\n        id: agent.id,\n        email: agent.email,\n        name: agent.name,\n        isActive: agent.isActive,\n        createdAt: agent.createdAt?.toDate?.() || agent.createdAt,\n        lastLoginAt: agent.lastLoginAt?.toDate?.() || agent.lastLoginAt,\n        phone: agent.phone || null,\n        stats: {\n          totalFiles: filesSnapshot.size,\n          completedFiles,\n          pendingFiles\n        }\n      };\n    }));\n\n    return NextResponse.json({\n      success: true,\n      agents: agentsWithStats,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total: totalAgents,\n        pages: Math.ceil(totalAgents / Number(limit))\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error fetching agents:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to fetch agents\" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create new agent\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { email, name, password, phone } = await request.json();\n\n    if (!email || !name || !password) {\n      return NextResponse.json(\n        { success: false, error: \"Email, name, and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists\n    const existingUser = await adminAuth.getUserByEmail(email).catch(() => null);\n    if (existingUser) {\n      return NextResponse.json(\n        { success: false, error: \"User with this email already exists\" },\n        { status: 409 }\n      );\n    }\n\n    // Create user in Firebase Auth\n    const userRecord = await adminAuth.createUser({\n      email,\n      password,\n      displayName: name\n    });\n\n    // Create agent document in agents collection\n    const agentData = {\n      email,\n      name,\n      phone: phone || null,\n      isActive: true,\n      createdAt: new Date(),\n      createdBy: admin.adminId,\n      // Agent-specific fields\n      maxConcurrentFiles: 10, // Default limit\n      specializations: [], // Can be added later\n      performance: {\n        totalFilesProcessed: 0,\n        averageResponseTime: 0,\n        rating: 0\n      }\n    };\n\n    await adminDb.collection('agents').doc(userRecord.uid).set(agentData);\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      action: 'agent_created',\n      adminId: admin.adminId,\n      adminName: admin.name,\n      targetUserId: userRecord.uid,\n      details: {\n        email,\n        name,\n        phone\n      },\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"Agent created successfully\",\n      data: {\n        agent: {\n          id: userRecord.uid,\n          email,\n          name,\n          isActive: true,\n          createdAt: agentData.createdAt,\n          phone\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error creating agent:\", error);\n    \n    if (error.code === 'adminAuth/email-already-exists') {\n      return NextResponse.json(\n        { success: false, error: \"Agent with this email already exists\" },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to create agent\" },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update agent\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { agentId, name, email, isActive, phone, maxConcurrentFiles, specializations } = await request.json();\n\n    if (!agentId) {\n      return NextResponse.json(\n        { success: false, error: \"Agent ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if agent exists\n    const agentDoc = await adminDb.collection('agents').doc(agentId).get();\n    if (!agentDoc.exists) {\n      return NextResponse.json(\n        { success: false, error: \"Agent not found\" },\n        { status: 404 }\n      );\n    }\n\n    const updateData: any = {\n      updatedAt: new Date(),\n      updatedBy: admin.adminId\n    };\n\n    if (name !== undefined) updateData.name = name;\n    if (email !== undefined) updateData.email = email;\n    if (isActive !== undefined) updateData.isActive = isActive;\n    if (phone !== undefined) updateData.phone = phone;\n    if (maxConcurrentFiles !== undefined) updateData.maxConcurrentFiles = maxConcurrentFiles;\n    if (specializations !== undefined) updateData.specializations = specializations;\n\n    // Update agent document\n    await adminDb.collection('agents').doc(agentId).update(updateData);\n\n    // Update Firebase Auth if email changed\n    if (email !== undefined) {\n      await adminAuth.updateUser(agentId, { email });\n    }\n\n    // Disable/enable agent in Firebase Auth if status changed\n    if (isActive !== undefined) {\n      await adminAuth.updateUser(agentId, { disabled: !isActive });\n    }\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      action: 'agent_updated',\n      adminId: admin.adminId,\n      adminName: admin.name,\n      targetUserId: agentId,\n      details: updateData,\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"Agent updated successfully\"\n    });\n\n  } catch (error: any) {\n    console.error(\"Error updating agent:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to update agent\" },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Deactivate agent (soft delete)\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const agentId = searchParams.get('agentId');\n\n    if (!agentId) {\n      return NextResponse.json(\n        { success: false, error: \"Agent ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if agent exists\n    const agentDoc = await adminDb.collection('agents').doc(agentId).get();\n    if (!agentDoc.exists) {\n      return NextResponse.json(\n        { success: false, error: \"Agent not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Check if agent has pending files\n    const pendingFilesSnapshot = await adminDb.collection('files')\n      .where('assignedAgentId', '==', agentId)\n      .where('status', 'in', ['paid', 'processing'])\n      .get();\n\n    if (pendingFilesSnapshot.size > 0) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: `Cannot deactivate agent. ${pendingFilesSnapshot.size} files are still pending. Please reassign them first.` \n        },\n        { status: 400 }\n      );\n    }\n\n    // Soft delete - deactivate agent\n    await adminDb.collection('agents').doc(agentId).update({\n      isActive: false,\n      deactivatedAt: new Date(),\n      deactivatedBy: admin.adminId,\n      updatedAt: new Date()\n    });\n\n    // Disable agent in Firebase Auth\n    await adminAuth.updateUser(agentId, { disabled: true });\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      action: 'agent_deactivated',\n      adminId: admin.adminId,\n      adminName: admin.name,\n      targetUserId: agentId,\n      details: {\n        reason: 'Admin deactivation'\n      },\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"Agent deactivated successfully\"\n    });\n\n  } catch (error: any) {\n    console.error(\"Error deactivating agent:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to deactivate agent\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}