{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { getFirestore } from 'firebase-admin/firestore';\r\nimport { getStorage } from 'firebase-admin/storage';\r\n\r\n// Initialize Firebase Admin\r\nconst privateKey = process.env.FIREBASE_PRIVATE_KEY?.replace(/^\"|\"$/g, '') || '';\r\n\r\nconst firebaseAdminConfig = {\r\n  credential: cert({\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n    privateKey: privateKey,\r\n  }),\r\n};\r\n\r\n// Initialize Firebase Admin\r\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\r\n\r\n// Initialize Firebase Admin services\r\nexport const adminAuth = getAuth(adminApp);\r\nexport const adminDb = getFirestore(adminApp);\r\nexport const adminStorage = getStorage(adminApp);\r\n\r\nexport default adminApp;\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,UAAU,OAAO;AAE9E,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/doc/apps/admin-app/src/app/api/admin/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { adminDb, adminAuth } from \"@/lib/firebase-admin\";\nimport { verifyAdminAuth, getQueryParams } from \"@/lib/admin-auth\";\n\n// GET - List all users\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const role = searchParams.get('role'); // 'user' or 'agent'\n    const status = searchParams.get('status'); // 'active' or 'inactive'\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    // Get users from all collections based on role filter\n    let allUsers: any[] = [];\n    let totalCount = 0;\n\n    // Define collections to query based on role filter\n    const collectionsToQuery = [];\n    if (!role) {\n      // If no role filter, get from all collections\n      collectionsToQuery.push('users', 'agents', 'admins');\n    } else {\n      // If role filter is specified, get from specific collection\n      if (role === 'user') collectionsToQuery.push('users');\n      if (role === 'agent') collectionsToQuery.push('agents');\n      if (role === 'admin') collectionsToQuery.push('admins');\n    }\n\n    // Query each collection\n    for (const collectionName of collectionsToQuery) {\n      let query: any = adminDb.collection(collectionName);\n      \n      if (status) {\n        const isActive = status === 'active';\n        query = query.where('isActive', '==', isActive);\n      }\n\n      const snapshot = await query.get();\n      \n      const collectionUsers = snapshot.docs.map((doc: any) => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          email: data.email,\n          name: data.name,\n          role: data.role || collectionName.slice(0, -1), // Default role based on collection name\n          isActive: data.isActive,\n          createdAt: data.createdAt?.toDate?.() || data.createdAt,\n          lastLoginAt: data.lastLoginAt?.toDate?.() || data.lastLoginAt,\n          phone: data.phone || null\n        };\n      });\n\n      allUsers = [...allUsers, ...collectionUsers];\n      totalCount += snapshot.size;\n    }\n\n    // Sort all users by createdAt (newest first)\n    allUsers.sort((a, b) => {\n      const aTime = a.createdAt?.toDate?.() || new Date(0);\n      const bTime = b.createdAt?.toDate?.() || new Date(0);\n      return bTime.getTime() - aTime.getTime();\n    });\n\n    // Apply pagination\n    const startIndex = offset;\n    const endIndex = offset + limit;\n    const users = allUsers.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      success: true,\n      users,\n      pagination: {\n        total: totalCount,\n        limit,\n        offset,\n        hasMore: users.length === limit\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error fetching users:\", error);\n    \n    if (error.message.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to fetch users\" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create new user\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { email, name, password, role = 'user', phone } = await request.json();\n    console.log('Received user creation data:', { email, name, password, role, phone });\n\n    if (!email || !name || !password) {\n      return NextResponse.json(\n        { success: false, error: \"Email, name, and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate password length\n    if (password.length < 6) {\n      return NextResponse.json(\n        { success: false, error: \"Password must be at least 6 characters long\" },\n        { status: 400 }\n      );\n    }\n\n    if (!['user', 'agent', 'admin'].includes(role)) {\n      return NextResponse.json(\n        { success: false, error: \"Invalid role. Must be user, agent, or admin\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists\n    const existingUser = await adminAuth.getUserByEmail(email).catch(() => null);\n    if (existingUser) {\n      return NextResponse.json(\n        { success: false, error: \"User with this email already exists\" },\n        { status: 409 }\n      );\n    }\n\n    // Create user in Firebase Auth\n    const userRecord = await adminAuth.createUser({\n      email,\n      password,\n      displayName: name\n    });\n\n    // Create user document in Firestore - choose collection based on role\n    const userData = {\n      email,\n      name,\n      password,\n      role,\n      phone: phone || null,\n      isActive: true,\n      createdAt: new Date(),\n      createdBy: admin.adminId\n    };\n\n    // Determine collection based on role\n    let collectionName = 'users'; // default\n    if (role === 'agent') collectionName = 'agents';\n    if (role === 'admin') collectionName = 'admins';\n\n    await adminDb.collection(collectionName).doc(userRecord.uid).set(userData);\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      actionType: 'user_created',\n      actorId: admin.adminId,\n      actorType: 'admin',\n      targetUserId: userRecord.uid,\n      details: {\n        email,\n        name,\n        role\n      },\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"User created successfully\",\n      data: {\n        user: {\n          id: userRecord.uid,\n          email,\n          name,\n          role,\n          isActive: true,\n          createdAt: userData.createdAt\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error creating user:\", error);\n    \n    if (error.message.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n\n    if (error.code === 'adminAuth/email-already-exists') {\n      return NextResponse.json(\n        { success: false, error: \"User with this email already exists\" },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to create user\" },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update user\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { userId, name, email, role, isActive, phone } = await request.json();\n\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: \"User ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user exists in any collection\n    let userDoc = null;\n    let collectionName = '';\n    \n    // Try to find user in each collection\n    const collections = ['users', 'agents', 'admins'];\n    for (const collection of collections) {\n      const doc = await adminDb.collection(collection).doc(userId).get();\n      if (doc.exists) {\n        userDoc = doc;\n        collectionName = collection;\n        break;\n      }\n    }\n    \n    if (!userDoc) {\n      return NextResponse.json(\n        { success: false, error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const updateData: any = {\n      updatedAt: new Date(),\n      updatedBy: admin.adminId\n    };\n\n    if (name !== undefined) updateData.name = name;\n    if (email !== undefined) updateData.email = email;\n    if (role !== undefined) updateData.role = role;\n    if (isActive !== undefined) updateData.isActive = isActive;\n    if (phone !== undefined) updateData.phone = phone;\n\n    // If role is being changed, we might need to move the user to a different collection\n    if (role !== undefined && role !== userDoc.data().role) {\n      const newCollectionName = role === 'agent' ? 'agents' : role === 'admin' ? 'admins' : 'users';\n      \n      if (newCollectionName !== collectionName) {\n        // Move user to new collection\n        await adminDb.collection(newCollectionName).doc(userId).set({\n          ...userDoc.data(),\n          ...updateData\n        });\n        // Delete from old collection\n        await adminDb.collection(collectionName).doc(userId).delete();\n      } else {\n        // Update in same collection\n        await adminDb.collection(collectionName).doc(userId).update(updateData);\n      }\n    } else {\n      // Update user document in current collection\n      await adminDb.collection(collectionName).doc(userId).update(updateData);\n    }\n\n    // Update Firebase Auth if email changed\n    if (email !== undefined) {\n      await adminAuth.updateUser(userId, { email });\n    }\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      actionType: 'user_updated',\n      actorId: admin.adminId,\n      actorType: 'admin',\n      targetUserId: userId,\n      details: updateData,\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"User updated successfully\"\n    });\n\n  } catch (error: any) {\n    console.error(\"Error updating user:\", error);\n    \n    if (error.message.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to update user\" },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Deactivate user (soft delete)\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: \"User ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user exists in any collection\n    let userDoc = null;\n    let collectionName = '';\n    \n    // Try to find user in each collection\n    const collections = ['users', 'agents', 'admins'];\n    for (const collection of collections) {\n      const doc = await adminDb.collection(collection).doc(userId).get();\n      if (doc.exists) {\n        userDoc = doc;\n        collectionName = collection;\n        break;\n      }\n    }\n    \n    if (!userDoc) {\n      return NextResponse.json(\n        { success: false, error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Hard delete - permanently remove user from the correct collection\n    await adminDb.collection(collectionName).doc(userId).delete();\n\n    // Delete user from Firebase Auth\n    await adminAuth.deleteUser(userId);\n\n    // Log the action\n    await adminDb.collection('logs').add({\n      actionType: 'user_deleted',\n      actorId: admin.adminId,\n      actorType: 'admin',\n      targetUserId: userId,\n      details: {\n        reason: 'Admin deletion'\n      },\n      timestamp: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"User deleted successfully\"\n    });\n\n  } catch (error: any) {\n    console.error(\"Error deleting user:\", error);\n    \n    if (error.message.includes(\"adminAuthentication\")) {\n      return NextResponse.json(\n        { success: false, error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: \"Failed to delete user\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}