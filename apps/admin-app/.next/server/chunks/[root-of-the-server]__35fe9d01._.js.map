{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\n\n// Initialize Firebase Admin\nconst privateKey = process.env.FIREBASE_PRIVATE_KEY?.replace(/^\"|\"$/g, '') || '';\n\nconst firebaseAdminConfig = {\n  credential: cert({\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n    privateKey: privateKey,\n  }),\n};\n\n// Initialize Firebase Admin\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\n\n// Initialize Firebase Admin services\nexport const adminAuth = getAuth(adminApp);\nexport const adminDb = getFirestore(adminApp);\nexport const adminStorage = getStorage(adminApp);\n\nexport default adminApp;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,UAAU,OAAO;AAE9E,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/server-cache.ts"],"sourcesContent":["type CacheEntry<T> = { data: T; expiresAt: number };\r\n\r\nclass SimpleLRUCache {\r\n  private store = new Map<string, CacheEntry<any>>();\r\n  private order: string[] = [];\r\n  constructor(private maxEntries: number = 200) {}\r\n\r\n  get<T>(key: string): T | undefined {\r\n    const entry = this.store.get(key);\r\n    if (!entry) return undefined;\r\n    if (Date.now() > entry.expiresAt) {\r\n      this.delete(key);\r\n      return undefined;\r\n    }\r\n    // touch\r\n    this.order = this.order.filter(k => k !== key);\r\n    this.order.push(key);\r\n    return entry.data as T;\r\n    }\r\n\r\n  set<T>(key: string, value: T, ttlMs: number): void {\r\n    const expiresAt = Date.now() + ttlMs;\r\n    this.store.set(key, { data: value, expiresAt });\r\n    this.order = this.order.filter(k => k !== key);\r\n    this.order.push(key);\r\n    // evict\r\n    while (this.order.length > this.maxEntries) {\r\n      const oldest = this.order.shift();\r\n      if (oldest) this.store.delete(oldest);\r\n    }\r\n  }\r\n\r\n  delete(key: string): void {\r\n    this.store.delete(key);\r\n    this.order = this.order.filter(k => k !== key);\r\n  }\r\n\r\n  deleteByPrefix(prefix: string): void {\r\n    for (const key of Array.from(this.store.keys())) {\r\n      if (key.startsWith(prefix)) this.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\nexport const serverCache = new SimpleLRUCache(300);\r\n\r\nexport function makeKey(resource: string, parts: Array<string | number | boolean | null | undefined> = []) {\r\n  return `admin:${resource}:${parts.filter(v => v !== undefined && v !== null).join(':')}`;\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAEA,MAAM;;IACI,MAA2C;IAC3C,MAAqB;IAC7B,YAAY,AAAQ,aAAqB,GAAG,CAAE;aAA1B,aAAA;aAFZ,QAAQ,IAAI;aACZ,QAAkB,EAAE;IACmB;IAE/C,IAAO,GAAW,EAAiB;QACjC,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,OAAO,OAAO;QACnB,IAAI,KAAK,GAAG,KAAK,MAAM,SAAS,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC;YACZ,OAAO;QACT;QACA,QAAQ;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,OAAO,MAAM,IAAI;IACjB;IAEF,IAAO,GAAW,EAAE,KAAQ,EAAE,KAAa,EAAQ;QACjD,MAAM,YAAY,KAAK,GAAG,KAAK;QAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;YAAE,MAAM;YAAO;QAAU;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,QAAQ;QACR,MAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAE;YAC1C,MAAM,SAAS,IAAI,CAAC,KAAK,CAAC,KAAK;YAC/B,IAAI,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC;IACF;IAEA,OAAO,GAAW,EAAQ;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;IAC5C;IAEA,eAAe,MAAc,EAAQ;QACnC,KAAK,MAAM,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAK;YAC/C,IAAI,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC;QAC1C;IACF;AACF;AAEO,MAAM,cAAc,IAAI,eAAe;AAEvC,SAAS,QAAQ,QAAgB,EAAE,QAA6D,EAAE;IACvG,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,MAAM,MAAM,CAAC,CAAA,IAAK,MAAM,aAAa,MAAM,MAAM,IAAI,CAAC,MAAM;AAC1F","debugId":null}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/app/api/admin/dashboard/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { adminDb } from \"@/lib/firebase-admin\";\nimport { verifyAdminAuth } from \"@/lib/admin-auth\";\nimport { serverCache, makeKey } from \"@/lib/server-cache\";\n\n// Helper function to handle Firestore connection issues with retry logic\nasync function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  delay: number = 1000\n): Promise<T> {\n  let lastError: any;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error: any) {\n      lastError = error;\n      \n      // Check if it's a connection error that we should retry\n      if (error.code === 14 || // UNAVAILABLE\n          error.message?.includes('No connection established') ||\n          error.message?.includes('network socket disconnected') ||\n          error.message?.includes('TLS connection') ||\n          error.code === 'ECONNRESET' ||\n          error.code === 'ENOTFOUND') {\n        \n        // Retrying...\n        \n        if (attempt < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, delay));\n          delay *= 2; // Exponential backoff\n          continue;\n        }\n      }\n      \n      // If it's not a retryable error or we've exhausted retries, throw\n      throw error;\n    }\n  }\n  \n  throw lastError;\n}\n\n// GET - Get admin dashboard statistics (ADMIN ONLY)\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify admin authentication\n    const admin = await verifyAdminAuth();\n    \n    // Ensure only admin role can access this endpoint\n    if (admin.role !== 'admin') {\n      return NextResponse.json(\n        { success: false, message: \"Admin access required\" },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const period = searchParams.get('period') || '30d'; // '7d', '30d', '90d', '1y'\n\n    // Check cache first\n    const cacheKey = makeKey('admin-dashboard', [period]);\n    const cached = serverCache.get(cacheKey);\n    if (cached) {\n      return NextResponse.json(cached);\n    }\n\n    // Calculate date range\n    const endDate = new Date();\n    const startDate = new Date();\n    \n    switch (period) {\n      case '7d':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case '30d':\n        startDate.setDate(endDate.getDate() - 30);\n        break;\n      case '90d':\n        startDate.setDate(endDate.getDate() - 90);\n        break;\n      case '1y':\n        startDate.setFullYear(endDate.getFullYear() - 1);\n        break;\n      default:\n        startDate.setDate(endDate.getDate() - 30);\n    }\n\n    // OPTIMIZED: Use targeted queries with proper limits instead of fetching all data\n    const [\n      usersSnapshot,\n      agentsSnapshot,\n      adminsSnapshot,\n      filesSnapshot,\n      paymentsSnapshot,\n      logsSnapshot\n    ] = await Promise.all([\n      // Users only (with limit)\n      withRetry(() => adminDb.collection('users')\n        .where('role', '==', 'user')\n        .limit(1000)\n        .get()\n      ).catch(() => ({ docs: [], size: 0 })),\n      \n      // Agents only (with limit)\n      withRetry(() => adminDb.collection('agents')\n        .limit(100)\n        .get()\n      ).catch(() => ({ docs: [], size: 0 })),\n      \n      // Admins only (with limit)\n      withRetry(() => adminDb.collection('admins')\n        .limit(50)\n        .get()\n      ).catch(() => ({ docs: [], size: 0 })),\n      \n      // Files with limit\n      withRetry(() => adminDb.collection('files')\n        .orderBy('uploadedAt', 'desc')\n        .limit(1000)\n        .get()\n      ).catch(() => ({ docs: [], size: 0 })),\n      \n      // Payments with limit\n      withRetry(() => adminDb.collection('payments')\n        .orderBy('createdAt', 'desc')\n        .limit(1000)\n        .get()\n      ).catch(() => ({ docs: [], size: 0 })),\n      \n      // Recent logs (already limited)\n      withRetry(() => adminDb.collection('logs')\n        .orderBy('timestamp', 'desc')\n        .limit(100)\n        .get()\n      ).catch(() => ({ docs: [], size: 0 }))\n    ]);\n\n    // Data is already separated by collection, no need to filter\n\n    // OPTIMIZATION: Single-pass data processing for all metrics\n    \n    // Initialize counters\n    let totalUsers = 0, activeUsers = 0, newUsers = 0;\n    let totalAgents = 0, activeAgents = 0, newAgents = 0;\n    let totalFiles = 0, newFiles = 0, unassignedFiles = 0;\n    let totalPayments = 0, successfulPayments = 0, newPayments = 0;\n    let totalRevenue = 0, newRevenue = 0;\n    const filesByStatus: Record<string, number> = {};\n\n    // Process users and agents in single pass\n    usersSnapshot.docs.forEach(doc => {\n      const data = doc.data();\n      const createdAt = data.createdAt?.toDate?.() || data.createdAt;\n      const isNew = createdAt && createdAt >= startDate;\n      \n      totalUsers++;\n      if (data.isActive) activeUsers++;\n      if (isNew) newUsers++;\n    });\n\n    agentsSnapshot.docs.forEach(doc => {\n      const data = doc.data();\n      const createdAt = data.createdAt?.toDate?.() || data.createdAt;\n      const isNew = createdAt && createdAt >= startDate;\n      \n      totalAgents++;\n      if (data.isActive) activeAgents++;\n      if (isNew) newAgents++;\n    });\n\n    // Process files in single pass\n    filesSnapshot.docs.forEach(doc => {\n      const data = doc.data();\n      const uploadedAt = data.uploadedAt?.toDate?.() || data.uploadedAt;\n      const isNew = uploadedAt && uploadedAt >= startDate;\n      \n      totalFiles++;\n      if (isNew) newFiles++;\n      if (data.status === 'paid' && !data.assignedAgentId) unassignedFiles++;\n      \n      // Count by status\n      const status = data.status;\n      filesByStatus[status] = (filesByStatus[status] || 0) + 1;\n    });\n\n    // Process payments in single pass\n    paymentsSnapshot.docs.forEach(doc => {\n      const data = doc.data();\n      const createdAt = data.createdAt?.toDate?.() || data.createdAt;\n      const isNew = createdAt && createdAt >= startDate;\n      const isSuccessful = data.status === 'captured';\n      \n      totalPayments++;\n      if (isSuccessful) {\n        successfulPayments++;\n        totalRevenue += data.amount || 0;\n        if (isNew) newRevenue += data.amount || 0;\n      }\n      if (isNew) newPayments++;\n    });\n\n    // Process logs for activity insights\n    const recentActivity = logsSnapshot.docs.slice(0, 10).map(doc => {\n      const data = doc.data();\n      return {\n        id: doc.id,\n        actionType: data.actionType,\n        actorId: data.actorId,\n        actorType: data.actorType,\n        timestamp: data.timestamp?.toDate?.() || data.timestamp,\n        details: data.details || {}\n      };\n    });\n\n    // Calculate success rates\n    const paymentSuccessRate = totalPayments > 0 \n      ? ((successfulPayments / totalPayments) * 100).toFixed(2)\n      : 0;\n\n    const fileCompletionRate = totalFiles > 0 \n      ? ((filesByStatus.completed || 0) / totalFiles * 100).toFixed(2)\n      : 0;\n\n    // OPTIMIZATION: Batch fetch agent performance data\n    const agentPerformance = await Promise.all(\n      agentsSnapshot.docs.map(async (agentDoc) => {\n        const agentData = agentDoc.data();\n        const agentId = agentDoc.id;\n        \n        const agentFilesSnapshot = await withRetry(() => \n          adminDb.collection('files')\n            .where('assignedAgentId', '==', agentId)\n            .get()\n        );\n\n        const completedFiles = agentFilesSnapshot.docs.filter(doc => \n          doc.data().status === 'completed'\n        ).length;\n\n        const pendingFiles = agentFilesSnapshot.docs.filter(doc => \n          doc.data().status === 'paid' || doc.data().status === 'processing'\n        ).length;\n\n        return {\n          id: agentId,\n          name: agentData.name,\n          email: agentData.email,\n          totalFiles: agentFilesSnapshot.size,\n          completedFiles,\n          pendingFiles,\n          completionRate: agentFilesSnapshot.size > 0 \n            ? ((completedFiles / agentFilesSnapshot.size) * 100).toFixed(2)\n            : 0\n        };\n      })\n    );\n\n    // Get daily statistics for charts\n    const dailyStats = await getDailyStats(startDate, endDate).catch(() => []);\n\n    const result = {\n      success: true,\n      period,\n      overview: {\n        totalUsers,\n        activeUsers,\n        newUsers,\n        totalAgents,\n        activeAgents,\n        newAgents,\n        totalFiles,\n        newFiles,\n        unassignedFiles,\n        totalPayments,\n        successfulPayments,\n        newPayments,\n        totalRevenue,\n        newRevenue\n      },\n      files: {\n        total: totalFiles,\n        byStatus: filesByStatus,\n        new: newFiles,\n        unassigned: unassignedFiles,\n        completionRate: fileCompletionRate\n      },\n      payments: {\n        total: totalPayments,\n        successful: successfulPayments,\n        new: newPayments,\n        totalRevenue,\n        newRevenue,\n        successRate: paymentSuccessRate\n      },\n      agents: {\n        total: totalAgents,\n        active: activeAgents,\n        new: newAgents,\n        performance: agentPerformance\n      },\n      activity: {\n        recent: recentActivity,\n        dailyStats\n      }\n    };\n\n    // Cache the result for 2 minutes\n    serverCache.set(cacheKey, result, 120_000); // 2 minutes\n\n    return NextResponse.json(result);\n\n  } catch (error: any) {\n    console.error(\"Error fetching dashboard data:\", error);\n    \n    // Handle specific error types\n    if (error.code === 14 || error.message?.includes('No connection established')) {\n      return NextResponse.json(\n        { success: false, message: \"Database connection failed. Please try again.\" },\n        { status: 503 }\n      );\n    }\n    \n    if (error.name === 'AbortError' || error.message?.includes('timeout')) {\n      return NextResponse.json(\n        { success: false, message: \"Request timed out. Please try again.\" },\n        { status: 408 }\n      );\n    }\n    \n    return NextResponse.json(\n      { success: false, message: \"Failed to fetch dashboard data\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to get daily statistics (OPTIMIZED)\nasync function getDailyStats(startDate: Date, endDate: Date) {\n  const dailyData: Record<string, any> = {};\n  \n  // Initialize all days in range\n  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n    const dateKey = d.toISOString().split('T')[0];\n    dailyData[dateKey] = {\n      date: dateKey,\n      files: 0,\n      payments: 0,\n      revenue: 0,\n      users: 0\n    };\n  }\n\n  try {\n    // OPTIMIZED: Use limited queries with date filters\n    const [filesSnapshot, paymentsSnapshot, usersSnapshot] = await Promise.all([\n      // Files with date range limit\n      withRetry(() => adminDb.collection('files')\n        .where('uploadedAt', '>=', startDate)\n        .where('uploadedAt', '<=', endDate)\n        .limit(1000)\n        .get()\n      ).catch(() => ({ docs: [] })),\n      \n      // Payments with date range limit\n      withRetry(() => adminDb.collection('payments')\n        .where('createdAt', '>=', startDate)\n        .where('createdAt', '<=', endDate)\n        .limit(1000)\n        .get()\n      ).catch(() => ({ docs: [] })),\n      \n      // Users with date range limit\n      withRetry(() => adminDb.collection('users')\n        .where('role', '==', 'user')\n        .where('createdAt', '>=', startDate)\n        .where('createdAt', '<=', endDate)\n        .limit(500)\n        .get()\n      ).catch(() => ({ docs: [] }))\n    ]);\n    \n    // Process files\n    filesSnapshot.docs.forEach(doc => {\n      const uploadedAt = doc.data().uploadedAt?.toDate?.() || doc.data().uploadedAt;\n      if (uploadedAt) {\n        const dateKey = uploadedAt.toISOString().split('T')[0];\n        if (dailyData[dateKey]) {\n          dailyData[dateKey].files++;\n        }\n      }\n    });\n\n    // Process payments\n    paymentsSnapshot.docs.forEach(doc => {\n      const createdAt = doc.data().createdAt?.toDate?.() || doc.data().createdAt;\n      if (createdAt) {\n        const dateKey = createdAt.toISOString().split('T')[0];\n        if (dailyData[dateKey]) {\n          dailyData[dateKey].payments++;\n          if (doc.data().status === 'captured') {\n            dailyData[dateKey].revenue += doc.data().amount || 0;\n          }\n        }\n      }\n    });\n\n    // Process users\n    usersSnapshot.docs.forEach(doc => {\n      const createdAt = doc.data().createdAt?.toDate?.() || doc.data().createdAt;\n      if (createdAt) {\n        const dateKey = createdAt.toISOString().split('T')[0];\n        if (dailyData[dateKey]) {\n          dailyData[dateKey].users++;\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching daily stats:', error);\n    // Return empty data if there's an error\n  }\n\n  return Object.values(dailyData).sort((a, b) => a.date.localeCompare(b.date));\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}