{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/firebase-admin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { getFirestore } from 'firebase-admin/firestore';\r\nimport { getStorage } from 'firebase-admin/storage';\r\n\r\n// Initialize Firebase Admin\r\nconst privateKey = process.env.FIREBASE_PRIVATE_KEY?.replace(/^\"|\"$/g, '') || '';\r\n\r\nconst firebaseAdminConfig = {\r\n  credential: cert({\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n    privateKey: privateKey,\r\n  }),\r\n};\r\n\r\n// Initialize Firebase Admin\r\nconst adminApp = getApps().length === 0 ? initializeApp(firebaseAdminConfig) : getApps()[0];\r\n\r\n// Initialize Firebase Admin services\r\nexport const adminAuth = getAuth(adminApp);\r\nexport const adminDb = getFirestore(adminApp);\r\nexport const adminStorage = getStorage(adminApp);\r\n\r\nexport default adminApp;\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,4BAA4B;AAC5B,MAAM,aAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,UAAU,OAAO;AAE9E,MAAM,sBAAsB;IAC1B,YAAY,IAAA,wJAAI,EAAC;QACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;QAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;QAC9C,YAAY;IACd;AACF;AAEA,4BAA4B;AAC5B,MAAM,WAAW,IAAA,2JAAO,IAAG,MAAM,KAAK,IAAI,IAAA,iKAAa,EAAC,uBAAuB,IAAA,2JAAO,GAAE,CAAC,EAAE;AAGpF,MAAM,YAAY,IAAA,6JAAO,EAAC;AAC1B,MAAM,UAAU,IAAA,4KAAY,EAAC;AAC7B,MAAM,eAAe,IAAA,sKAAU,EAAC;uCAExB","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/lib/admin-auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { adminAuth, adminDb } from \"./firebase-admin\";\n\n// Admin authentication helper that verifies against admins collection\nexport async function verifyAdminAuth() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('admin-token')?.value;\n    \n    // For development, we'll allow access with a simple token check\n    if (token === 'dev_admin_token') {\n      return { \n        adminId: \"dev_admin\", \n        name: \"Development Admin\",\n        email: \"admin@docuploaer.com\",\n        role: \"admin\"\n      };\n    }\n\n    if (!token) {\n      throw new Error('No admin authentication token found');\n    }\n\n    // Verify the token with Firebase Admin\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    \n    // Check if this is a custom token with admin role\n    if (decodedToken.role === 'admin') {\n      return {\n        adminId: decodedToken.adminId || decodedToken.uid,\n        name: decodedToken.name || 'Admin',\n        email: decodedToken.email || 'admin@example.com',\n        role: \"admin\"\n      };\n    }\n    \n    // Get admin data from admins collection\n    const adminDoc = await adminDb.collection('admins').doc(decodedToken.uid).get();\n    \n    if (!adminDoc.exists) {\n      throw new Error('Admin not found in database');\n    }\n\n    const adminData = adminDoc.data();\n    \n    if (!adminData?.isActive) {\n      throw new Error('Admin account is deactivated');\n    }\n\n    return {\n      adminId: decodedToken.uid,\n      name: adminData.name,\n      email: adminData.email,\n      role: \"admin\"\n    };\n  } catch (error) {\n    // For development, return default admin even on error\n    return { \n      adminId: \"dev_admin\", \n      name: \"Development Admin\",\n      email: \"admin@docuploaer.com\",\n      role: \"admin\"\n    };\n  }\n}\n\n// Helper function to get query parameters\nexport function getQueryParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  return {\n    filter: searchParams.get('filter') || 'all',\n    dateFilter: searchParams.get('dateFilter') || 'all',\n    search: searchParams.get('search') || '',\n    limit: parseInt(searchParams.get('limit') || '50'),\n    offset: parseInt(searchParams.get('offset') || '0'),\n    status: searchParams.get('status'),\n    userId: searchParams.get('userId'),\n    fileId: searchParams.get('fileId'),\n    startDate: searchParams.get('startDate'),\n    endDate: searchParams.get('endDate')\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,4IAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,gBAAgB;QAE9C,gEAAgE;QAChE,IAAI,UAAU,mBAAmB;YAC/B,OAAO;gBACL,SAAS;gBACT,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;QACF;QAEA,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,sKAAS,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,IAAI,aAAa,IAAI,KAAK,SAAS;YACjC,OAAO;gBACL,SAAS,aAAa,OAAO,IAAI,aAAa,GAAG;gBACjD,MAAM,aAAa,IAAI,IAAI;gBAC3B,OAAO,aAAa,KAAK,IAAI;gBAC7B,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,oKAAO,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,aAAa,GAAG,EAAE,GAAG;QAE7E,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,SAAS,IAAI;QAE/B,IAAI,CAAC,WAAW,UAAU;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YACL,SAAS,aAAa,GAAG;YACzB,MAAM,UAAU,IAAI;YACpB,OAAO,UAAU,KAAK;YACtB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,MAAM;QACR;IACF;AACF;AAGO,SAAS,eAAe,OAAoB;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,OAAO;QACL,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,YAAY,aAAa,GAAG,CAAC,iBAAiB;QAC9C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,SAAS,aAAa,GAAG,CAAC,aAAa;QAC/C,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,QAAQ,aAAa,GAAG,CAAC;QACzB,WAAW,aAAa,GAAG,CAAC;QAC5B,SAAS,aAAa,GAAG,CAAC;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///D:/majalgav/hosting%20admin/apps/admin-app/src/app/api/admin/monitor-assignments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { adminDb } from \"@/lib/firebase-admin\";\nimport { verifyAdminAuth } from \"@/lib/admin-auth\";\n\n// Helper function to trigger automatic assignment for paid files\nasync function triggerAutoAssignment(fileIds: string[]) {\n  try {\n    console.log(`[MONITOR] Triggering auto-assignment for files: ${fileIds.join(', ')}`);\n    \n    // Use the auto-assignment logic directly instead of making HTTP calls\n    const agentsSnapshot = await adminDb.collection('agents')\n      .where('isActive', '==', true)\n      .get();\n\n    if (agentsSnapshot.empty) {\n      console.log('[MONITOR] No active agents found');\n      return { success: false, error: 'No active agents found' };\n    }\n\n    // Calculate current workload for each agent\n    const agentWorkloads = await Promise.all(\n      agentsSnapshot.docs.map(async (agentDoc) => {\n        const agentData = agentDoc.data();\n        const agentId = agentDoc.id;\n\n        // Count assigned files for this agent\n        const assignedFilesSnapshot = await adminDb.collection('files')\n          .where('assignedAgentId', '==', agentId)\n          .where('status', 'in', ['paid', 'assigned', 'in_progress'])\n          .get();\n\n        return {\n          agentId,\n          agentName: agentData.name || 'Unknown Agent',\n          agentEmail: agentData.email || 'No email',\n          currentWorkload: assignedFilesSnapshot.size,\n          maxWorkload: agentData.maxWorkload || 20,\n          isActive: agentData.isActive || false,\n          lastAssigned: agentData.lastAssigned || null\n        };\n      })\n    );\n\n    // Sort agents by workload (least loaded first)\n    const sortedAgents = agentWorkloads\n      .filter(agent => agent.isActive)\n      .sort((a, b) => {\n        if (a.currentWorkload !== b.currentWorkload) {\n          return a.currentWorkload - b.currentWorkload;\n        }\n        if (a.lastAssigned && b.lastAssigned) {\n          return new Date(a.lastAssigned).getTime() - new Date(b.lastAssigned).getTime();\n        }\n        if (!a.lastAssigned && b.lastAssigned) return -1;\n        if (a.lastAssigned && !b.lastAssigned) return 1;\n        return 0;\n      });\n\n    if (sortedAgents.length === 0) {\n      console.log('[MONITOR] No available agents for assignment');\n      return { success: false, error: 'No available agents for assignment' };\n    }\n\n    // Assign files to agents using round-robin with workload consideration\n    const assignments = [];\n    let agentIndex = 0;\n\n    for (const fileId of fileIds) {\n      // Find the best agent for this file\n      let selectedAgent = null;\n      \n      // Try to find an agent with available capacity\n      for (let i = 0; i < sortedAgents.length; i++) {\n        const agent = sortedAgents[agentIndex % sortedAgents.length];\n        agentIndex++;\n        \n        if (agent.currentWorkload < agent.maxWorkload) {\n          selectedAgent = agent;\n          break;\n        }\n      }\n\n      // If no agent has capacity, assign to the least loaded one\n      if (!selectedAgent) {\n        selectedAgent = sortedAgents[0];\n      }\n\n      // Update the file with assignment\n      await adminDb.collection('files').doc(fileId).update({\n        assignedAgentId: selectedAgent.agentId,\n        assignedAt: new Date(),\n        status: 'assigned',\n        updatedAt: new Date()\n      });\n\n      // Update agent's workload count\n      selectedAgent.currentWorkload++;\n\n      assignments.push({\n        fileId,\n        agentId: selectedAgent.agentId,\n        agentName: selectedAgent.agentName,\n        workload: selectedAgent.currentWorkload\n      });\n\n      // Update agent's last assigned time\n      await adminDb.collection('agents').doc(selectedAgent.agentId).update({\n        lastAssigned: new Date(),\n        updatedAt: new Date()\n      });\n    }\n\n    console.log(`[MONITOR] Successfully assigned ${assignments.length} files`);\n    return {\n      success: true,\n      message: `Successfully auto-assigned ${fileIds.length} file(s)`,\n      assignments: assignments,\n      totalAssigned: fileIds.length\n    };\n\n  } catch (error) {\n    console.error('[MONITOR] Error in auto-assignment:', error);\n    return { success: false, error: 'Auto-assignment failed' };\n  }\n}\n\n// GET - Check for unassigned paid files and auto-assign them\nexport async function GET(request: NextRequest) {\n  try {\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find all unassigned paid files\n    const unassignedPaidFilesSnapshot = await adminDb.collection('files')\n      .where('status', '==', 'paid')\n      .where('assignedAgentId', '==', null)\n      .get();\n\n    if (unassignedPaidFilesSnapshot.empty) {\n      return NextResponse.json({\n        success: true,\n        message: 'No unassigned paid files found',\n        assignedCount: 0\n      });\n    }\n\n    const unassignedFiles = unassignedPaidFilesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    console.log(`Found ${unassignedFiles.length} unassigned paid files`);\n\n    // Auto-assign all unassigned paid files\n    const fileIds = unassignedFiles.map(file => file.id);\n    const autoAssignResult = await triggerAutoAssignment(fileIds);\n\n    if (autoAssignResult.success) {\n      return NextResponse.json({\n        success: true,\n        message: `Auto-assigned ${autoAssignResult.totalAssigned || 0} files`,\n        assignedCount: autoAssignResult.totalAssigned || 0,\n        assignments: autoAssignResult.assignments || []\n      });\n    } else {\n      return NextResponse.json({\n        success: false,\n        error: autoAssignResult.error || 'Auto-assignment failed',\n        assignedCount: 0\n      });\n    }\n\n  } catch (error: any) {\n    console.error('Error in monitor assignments:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to monitor assignments' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Manually trigger assignment monitoring\nexport async function POST(request: NextRequest) {\n  try {\n    const admin = await verifyAdminAuth();\n    if (!admin) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { force = false } = await request.json();\n\n    // Find all unassigned paid files\n    const unassignedPaidFilesSnapshot = await adminDb.collection('files')\n      .where('status', '==', 'paid')\n      .where('assignedAgentId', '==', null)\n      .get();\n\n    if (unassignedPaidFilesSnapshot.empty) {\n      return NextResponse.json({\n        success: true,\n        message: 'No unassigned paid files found',\n        assignedCount: 0\n      });\n    }\n\n    const unassignedFiles = unassignedPaidFilesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    console.log(`Manual trigger: Found ${unassignedFiles.length} unassigned paid files`);\n\n    // Auto-assign all unassigned paid files\n    const fileIds = unassignedFiles.map(file => file.id);\n    const autoAssignResult = await triggerAutoAssignment(fileIds);\n\n    if (autoAssignResult.success) {\n      // Log the manual trigger\n      await adminDb.collection('logs').add({\n        action: 'manual_assignment_trigger',\n        adminId: admin.adminId,\n        adminName: admin.name,\n        fileIds: fileIds,\n        assignedCount: autoAssignResult.totalAssigned || 0,\n        timestamp: new Date()\n      });\n\n      return NextResponse.json({\n        success: true,\n        message: `Manually triggered assignment of ${autoAssignResult.totalAssigned || 0} files`,\n        assignedCount: autoAssignResult.totalAssigned || 0,\n        assignments: autoAssignResult.assignments || []\n      });\n    } else {\n      return NextResponse.json({\n        success: false,\n        error: autoAssignResult.error || 'Auto-assignment failed',\n        assignedCount: 0\n      });\n    }\n\n  } catch (error: any) {\n    console.error('Error in manual assignment trigger:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to trigger assignments' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}